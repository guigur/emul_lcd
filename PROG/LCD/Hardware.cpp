#include "Hardware.h"

Hardware::Hardware()
{
	setupCharset();
	_spaceBetweenLines = 45;
	_clock = &sf::Clock(); //init da clock
	_blickingRate = sf::seconds(0.5f);

	if (!_texture.loadFromFile("medias/lcd.png"))
	{
		std::cout << "cannot load texture" << std::endl;
		exit(-1);
	}

	returnHome();

	std::thread gui(&Hardware::gui_thread, this);     // spawn new thread that calls gui_thread()
	gui.detach();
}

void Hardware::clear()
{
	for (int i = 0; i < _numberOfRows; i++) //init the vector
	{
		_linesStr.at(i).insert(0, _numberOfCollums, ' ');
	}
}

void Hardware::returnHome()
{
	_cursor = { 0, 0 };
}

void Hardware::gui_thread()
{
	sf::Vector2u size;
	size.x = 550;
	int ratio = 847 / 380;
	size.y = size.x / ratio;
	_size = size;


	sf::RenderWindow window(sf::VideoMode(size.x, size.y), "LCD 16x2");
	_window = &window;

	_body.setSize((sf::Vector2f)size);
	_body.setTexture(&_texture);

	while (_window->isOpen())
	{
		if (_cursorBlink && _clock->getElapsedTime() >= _blickingRate) //Blinky blinky
		{
			if (_blinkState == true)
				_blinkState = false;
			else
				_blinkState = true;
			_clock->restart();
		}

		sf::Event event;
		while (_window->pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				_window->close();
		}

		_window->clear();
		_window->draw(*this);
		_window->display();
	}
}

void Hardware::blink(bool state)
{
	_cursorBlink = state;
	_cursorState = state;
}

void Hardware::cursor(bool state)
{
	_cursorState = state;
}

void Hardware::setCursor(const unsigned int &col, const unsigned int &row)
{
	_cursor.x = col;
	_cursor.y = row;
}

void Hardware::print(const std::string &str)
{
	//_linesStr.at(_cursor.y).insert(_cursor.x, str);
	_linesStr.at(_cursor.y).replace(_cursor.x, str.length(), str);
	_cursor.x = _cursor.x + str.length();
	fillWithBlanks(_cursor.y);
}

void Hardware::setText(const std::string &str, const unsigned int &line)
{
	if (!_linesStr.empty() && _linesStr.size() > line)
	{
		_linesStr.at(line) = str;
		fillWithBlanks(line);
	}
}

void Hardware::setNumberOfCollums(const unsigned int &noc)
{
	_numberOfCollums = noc;
}

unsigned int Hardware::getNumberOfCollums()
{
	return _numberOfCollums;
}

void Hardware::setNumberOfRows(const unsigned int &nor)
{
	_numberOfRows = nor;
	_linesStr.clear(); //erase the vector if you rerun this command
	for (int i = 0; i < _numberOfRows; i++) //init the vector
	{
		_linesStr.push_back("");
	}
	clear(); //to fill screen with empty characters
}

unsigned int Hardware::getNumberOfRows()
{
	return _numberOfRows;
}

//////////////////////////////////////////// PRIVATE STUFF ////////////////////////////////////////////
void Hardware::drawLine(sf::RenderTarget& target, int line) const
{
	unsigned int spaceCharacters = 1;
	sf::Vector2f startPos(68, 100);

	Character charos(_charset);
	charos.setPixSize(5);

	for (unsigned int i = 0; i < _numberOfCollums && i < _linesStr.at(line).length(); i++)
	{
		charos.setChar(_linesStr.at(line).at(i));

		if (_cursorState && _cursor.x == i && _cursor.y == line)
		{
			if (_blinkState == true)
				charos.setChar('_');
			else
				charos.setChar(0xFF);
		}

		charos.setPosition(startPos.x + (charos.getPixSize().x * 5 + spaceCharacters) * i, startPos.y + 0 + (line * _spaceBetweenLines));
		target.draw(charos);
	}
}

void Hardware::draw(sf::RenderTarget& target, sf::RenderStates states) const
{
	target.draw(_body);

	for (int i = 0; i < _numberOfRows; i++) //draw each line
	{
		drawLine(target, i);
	}
}

void Hardware::fillWithBlanks(const unsigned int &line)
{
	if (_linesStr.at(line).length() < _numberOfCollums)
	{
		_linesStr.at(line).insert(_linesStr.at(line).end(), _numberOfCollums - _linesStr.at(line).length(), ' '); //fill the remaning space with spaces
	}
}

void Hardware::setupCharset()
{
	///TODO: finish the charset and maybe add an alternative one

	//1st col 0x00 -> 0x0F
	//reserved for the lcd ram

	//2nd col 0x10 -> 0x1F
	//empty

	//3rd col 0x20 -> 0x2F
	_charset[' '] = { { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 } };
	_charset['!'] = { { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x00 }, { 0x00 }, { 0x04 }, { 0x00 } };
	_charset['"'] = { { 0x0A }, { 0x0A }, { 0x0A }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 } };
	_charset['#'] = { { 0x0A }, { 0x0A }, { 0x1F }, { 0x0A }, { 0x1F }, { 0x0A }, { 0x0A }, { 0x00 } };
	_charset['$'] = { { 0x04 }, { 0x0F }, { 0x14 }, { 0x0E }, { 0x05 }, { 0x1E }, { 0x04 }, { 0x00 } };
	_charset['%'] = { { 0x18 }, { 0x19 }, { 0x02 }, { 0x04 }, { 0x08 }, { 0x13 }, { 0x03 }, { 0x00 } };
	_charset['&'] = { { 0x0C }, { 0x12 }, { 0x14 }, { 0x08 }, { 0x15 }, { 0x12 }, { 0x0D }, { 0x00 } };
	_charset['\''] = { { 0x0C }, { 0x04 }, { 0x08 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 } };
	_charset['('] = { { 0x02 }, { 0x04 }, { 0x08 }, { 0x08 }, { 0x08 }, { 0x04 }, { 0x02 }, { 0x00 } };
	_charset[')'] = { { 0x08 }, { 0x04 }, { 0x02 }, { 0x02 }, { 0x02 }, { 0x04 }, { 0x08 }, { 0x00 } };
	_charset['*'] = { { 0x00 }, { 0x04 }, { 0x15 }, { 0x0E }, { 0x15 }, { 0x04 }, { 0x00 }, { 0x00 } };
	_charset['+'] = { { 0x00 }, { 0x04 }, { 0x04 }, { 0x1F }, { 0x04 }, { 0x04 }, { 0x00 }, { 0x00 } };
	_charset[','] = { { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x0C }, { 0x04 }, { 0x08 }, { 0x00 } };
	_charset['-'] = { { 0x00 }, { 0x00 }, { 0x00 }, { 0x1F }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 } };
	_charset['.'] = { { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x0C }, { 0x0C }, { 0x00 } };
	_charset['/'] = { { 0x00 }, { 0x01 }, { 0x02 }, { 0x04 }, { 0x08 }, { 0x10 }, { 0x00 }, { 0x00 } };

	//4th col 0x30 -> 0x3F
	_charset['0'] = { { 0x0E }, { 0x11 }, { 0x13 }, { 0x15 }, { 0x19 }, { 0x11 }, { 0x0E }, { 0x00 } };
	_charset['1'] = { { 0x04 }, { 0x0C }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x0E }, { 0x00 } };
	_charset['2'] = { { 0x0E }, { 0x11 }, { 0x01 }, { 0x02 }, { 0x04 }, { 0x08 }, { 0x1F }, { 0x00 } };
	_charset['3'] = { { 0x1F }, { 0x02 }, { 0x04 }, { 0x02 }, { 0x01 }, { 0x11 }, { 0x0E }, { 0x00 } };
	_charset['4'] = { { 0x02 }, { 0x06 }, { 0x0A }, { 0x12 }, { 0x1F }, { 0x02 }, { 0x02 }, { 0x00 } };
	_charset['5'] = { { 0x1F }, { 0x10 }, { 0x1E }, { 0x01 }, { 0x01 }, { 0x11 }, { 0x0E }, { 0x00 } };
	_charset['6'] = { { 0x06 }, { 0x08 }, { 0x10 }, { 0x1E }, { 0x11 }, { 0x11 }, { 0x0E }, { 0x00 } };
	_charset['7'] = { { 0x1F }, { 0x11 }, { 0x01 }, { 0x02 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x00 } };
	_charset['8'] = { { 0x0E }, { 0x11 }, { 0x11 }, { 0x0E }, { 0x11 }, { 0x11 }, { 0x0E }, { 0x00 } };
	_charset['9'] = { { 0x0E }, { 0x11 }, { 0x11 }, { 0x0F }, { 0x01 }, { 0x02 }, { 0x0C }, { 0x00 } };
	_charset[':'] = { { 0x00 }, { 0x0C }, { 0x0C }, { 0x00 }, { 0x0C }, { 0x0C }, { 0x00 }, { 0x00 } };
	_charset[';'] = { { 0x00 }, { 0x0C }, { 0x0C }, { 0x00 }, { 0x0C }, { 0x04 }, { 0x08 }, { 0x00 } };
	_charset['<'] = { { 0x02 }, { 0x04 }, { 0x08 }, { 0x10 }, { 0x08 }, { 0x04 }, { 0x02 }, { 0x00 } };
	_charset['='] = { { 0x00 }, { 0x00 }, { 0x1F }, { 0x00 }, { 0x1F }, { 0x00 }, { 0x00 }, { 0x00 } };
	_charset['>'] = { { 0x08 }, { 0x04 }, { 0x02 }, { 0x01 }, { 0x02 }, { 0x04 }, { 0x08 }, { 0x00 } };
	_charset['?'] = { { 0x0E }, { 0x11 }, { 0x01 }, { 0x02 }, { 0x04 }, { 0x00 }, { 0x04 }, { 0x00 } };

	//5th col 0x40 -> 0x4F
	_charset['@'] = { { 0x0E }, { 0x11 }, { 0x01 }, { 0x0D }, { 0x15 }, { 0x15 }, { 0x0E }, { 0x00 } };
	_charset['A'] = { { 0x0E }, { 0x11 }, { 0x11 }, { 0x1F }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x00 } };
	_charset['B'] = { { 0x1E }, { 0x11 }, { 0x11 }, { 0x1E }, { 0x11 }, { 0x11 }, { 0x1E }, { 0x00 } };
	_charset['C'] = { { 0x0E }, { 0x11 }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x11 }, { 0x0E }, { 0x00 } };
	_charset['D'] = { { 0x1C }, { 0x12 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x12 }, { 0x1C }, { 0x00 } };
	_charset['E'] = { { 0x1F }, { 0x10 }, { 0x10 }, { 0x1E }, { 0x10 }, { 0x10 }, { 0x1F }, { 0x00 } };
	_charset['F'] = { { 0x1F }, { 0x10 }, { 0x10 }, { 0x1E }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x00 } };
	_charset['G'] = { { 0x0E }, { 0x11 }, { 0x10 }, { 0x17 }, { 0x11 }, { 0x11 }, { 0x0F }, { 0x00 } };
	_charset['H'] = { { 0x11 }, { 0x11 }, { 0x11 }, { 0x1F }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x00 } };
	_charset['I'] = { { 0x0E }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x0E }, { 0x00 } };
	_charset['J'] = { { 0x07 }, { 0x02 }, { 0x02 }, { 0x02 }, { 0x02 }, { 0x12 }, { 0x0C }, { 0x00 } };
	_charset['K'] = { { 0x11 }, { 0x12 }, { 0x14 }, { 0x18 }, { 0x14 }, { 0x12 }, { 0x11 }, { 0x00 } };
	_charset['L'] = { { 0x10 }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x1F }, { 0x00 } };
	_charset['M'] = { { 0x11 }, { 0x1B }, { 0x15 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x00 } };
	_charset['N'] = { { 0x11 }, { 0x11 }, { 0x19 }, { 0x15 }, { 0x13 }, { 0x11 }, { 0x11 }, { 0x00 } };
	_charset['O'] = { { 0x0E }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x0E }, { 0x00 } };

	//6th col 0x50 -> 0x5F
	_charset['P'] = { { 0x1E }, { 0x11 }, { 0x11 }, { 0x1E }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x00 } };
	_charset['Q'] = { { 0x0E }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x15 }, { 0x12 }, { 0x0D }, { 0x00 } };
	_charset['R'] = { { 0x1E }, { 0x11 }, { 0x11 }, { 0x1E }, { 0x14 }, { 0x12 }, { 0x11 }, { 0x00 } };
	_charset['S'] = { { 0x0F }, { 0x10 }, { 0x10 }, { 0x0E }, { 0x01 }, { 0x01 }, { 0x1E }, { 0x00 } };
	_charset['T'] = { { 0x1F }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x00 } };
	_charset['U'] = { { 0x11 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x0E }, { 0x00 } };
	_charset['V'] = { { 0x11 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x0A }, { 0x04 }, { 0x00 } };
	_charset['W'] = { { 0x11 }, { 0x11 }, { 0x11 }, { 0x15 }, { 0x15 }, { 0x15 }, { 0x0A }, { 0x00 } };
	_charset['X'] = { { 0x11 }, { 0x11 }, { 0x0A }, { 0x04 }, { 0x0A }, { 0x11 }, { 0x11 }, { 0x00 } };
	_charset['Y'] = { { 0x11 }, { 0x11 }, { 0x11 }, { 0x0A }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x00 } };
	_charset['Z'] = { { 0x1F }, { 0x01 }, { 0x02 }, { 0x04 }, { 0x08 }, { 0x10 }, { 0x1F }, { 0x00 } };
	_charset['['] = { { 0x1C }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x1C }, { 0x00 } };
	_charset['¥'] = { { 0x11 }, { 0x0A }, { 0x1F }, { 0x04 }, { 0x1F }, { 0x04 }, { 0x04 }, { 0x00 } };
	_charset[']'] = { { 0x0E }, { 0x02 }, { 0x02 }, { 0x02 }, { 0x02 }, { 0x02 }, { 0x0E }, { 0x00 } };
	_charset['^'] = { { 0x04 }, { 0x0A }, { 0x11 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 } };
	_charset['_'] = { { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x1F }, { 0x00 } };

	//7th col 0x60 -> 0x6F
	_charset['`'] = { { 0x08 }, { 0x04 }, { 0x02 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 }, { 0x00 } };
	_charset['a'] = { { 0x00 }, { 0x00 }, { 0x0E }, { 0x01 }, { 0x0F }, { 0x11 }, { 0x0F }, { 0x00 } };
	_charset['b'] = { { 0x10 }, { 0x10 }, { 0x16 }, { 0x19 }, { 0x11 }, { 0x11 }, { 0x1E }, { 0x00 } };
	_charset['c'] = { { 0x00 }, { 0x00 }, { 0x0E }, { 0x10 }, { 0x10 }, { 0x11 }, { 0x0E }, { 0x00 } };
	_charset['d'] = { { 0x01 }, { 0x01 }, { 0x0D }, { 0x13 }, { 0x11 }, { 0x11 }, { 0x0F }, { 0x00 } };
	_charset['e'] = { { 0x00 }, { 0x00 }, { 0x0E }, { 0x11 }, { 0x1F }, { 0x10 }, { 0x0E }, { 0x00 } };
	_charset['f'] = { { 0x06 }, { 0x09 }, { 0x08 }, { 0x1C }, { 0x08 }, { 0x08 }, { 0x08 }, { 0x00 } };
	_charset['g'] = { { 0x00 }, { 0x0F }, { 0x11 }, { 0x11 }, { 0x0F }, { 0x01 }, { 0x0E }, { 0x00 } };
	_charset['h'] = { { 0x10 }, { 0x10 }, { 0x16 }, { 0x19 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x00 } };
	_charset['i'] = { { 0x04 }, { 0x00 }, { 0x0C }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x0E }, { 0x00 } };
	_charset['j'] = { { 0x02 }, { 0x00 }, { 0x06 }, { 0x02 }, { 0x02 }, { 0x12 }, { 0x0C }, { 0x00 } };
	_charset['k'] = { { 0x10 }, { 0x10 }, { 0x12 }, { 0x14 }, { 0x18 }, { 0x14 }, { 0x12 }, { 0x00 } };
	_charset['l'] = { { 0x0C }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x0E }, { 0x00 } };
	_charset['m'] = { { 0x00 }, { 0x00 }, { 0x1A }, { 0x15 }, { 0x15 }, { 0x11 }, { 0x11 }, { 0x00 } };
	_charset['n'] = { { 0x00 }, { 0x00 }, { 0x16 }, { 0x19 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x00 } };
	_charset['o'] = { { 0x00 }, { 0x00 }, { 0x0E }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x0E }, { 0x00 } };

	//8th col 0x70 -> 0x7F
	_charset['p'] = { { 0x00 }, { 0x00 }, { 0x1E }, { 0x11 }, { 0x1E }, { 0x10 }, { 0x10 }, { 0x00 } };
	_charset['q'] = { { 0x00 }, { 0x00 }, { 0x0D }, { 0x13 }, { 0x0F }, { 0x01 }, { 0x01 }, { 0x00 } };
	_charset['r'] = { { 0x00 }, { 0x00 }, { 0x16 }, { 0x19 }, { 0x10 }, { 0x10 }, { 0x10 }, { 0x00 } };
	_charset['s'] = { { 0x00 }, { 0x00 }, { 0x0E }, { 0x10 }, { 0x0E }, { 0x01 }, { 0x1E }, { 0x00 } };
	_charset['t'] = { { 0x08 }, { 0x08 }, { 0x1C }, { 0x08 }, { 0x08 }, { 0x09 }, { 0x06 }, { 0x00 } };
	_charset['u'] = { { 0x00 }, { 0x00 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x13 }, { 0x0D }, { 0x00 } };
	_charset['v'] = { { 0x00 }, { 0x00 }, { 0x11 }, { 0x11 }, { 0x11 }, { 0x0A }, { 0x04 }, { 0x00 } };
	_charset['w'] = { { 0x00 }, { 0x00 }, { 0x11 }, { 0x15 }, { 0x15 }, { 0x15 }, { 0x0A }, { 0x00 } };
	_charset['x'] = { { 0x00 }, { 0x00 }, { 0x11 }, { 0x0A }, { 0x04 }, { 0x0A }, { 0x11 }, { 0x00 } };
	_charset['y'] = { { 0x00 }, { 0x00 }, { 0x11 }, { 0x11 }, { 0x0F }, { 0x01 }, { 0x0E }, { 0x00 } };
	_charset['z'] = { { 0x00 }, { 0x00 }, { 0x1F }, { 0x02 }, { 0x04 }, { 0x08 }, { 0x1F }, { 0x00 } };
	_charset['{'] = { { 0x02 }, { 0x04 }, { 0x04 }, { 0x08 }, { 0x04 }, { 0x04 }, { 0x02 }, { 0x00 } };
	_charset['|'] = { { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x04 }, { 0x00 } };
	_charset['}'] = { { 0x08 }, { 0x04 }, { 0x04 }, { 0x02 }, { 0x04 }, { 0x04 }, { 0x08 }, { 0x00 } };
	_charset[0x7E] = { { 0x00 }, { 0x04 }, { 0x02 }, { 0x1F }, { 0x02 }, { 0x04 }, { 0x00 }, { 0x00 } }; //→
	_charset[0x7F] = { { 0x00 }, { 0x04 }, { 0x08 }, { 0x1F }, { 0x08 }, { 0x04 }, { 0x00 }, { 0x00 } }; //←

	//9th col 0x80 -> 0x8F
	//empty

	//10th col 0x90 -> 0x9F
	//empty

	//11th col 0xA0 -> 0xAF
	//0xA0 is empty
	///TODO: here

	//12th col 0xB0 -> 0xBF
	///TODO: here

	//13th col 0xC0 -> 0xCF
	///TODO: here

	//14th col 0xD0 -> 0xDF
	///TODO: here

	//15th col 0xE0 -> 0xEF
	///TODO: here

	//15th col 0xEF -> 0xFF
	///TODO: here
	_charset[0xFF] = { { 0x1F }, { 0x1F }, { 0x1F }, { 0x1F }, { 0x1F }, { 0x1F }, { 0x1F }, { 0x1F } }; //cursor
}